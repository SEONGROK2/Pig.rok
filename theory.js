// 데이터타입 
// 1. 기본형 Primitive type
// - Number
// - String
// - Boolean
// - null
// - undefined
// - Symbol(es6)

// 2. 참조형 Reference type
// [Object]
// - Array
// - Function
// - Date
// - RegExp
// - Map, WeakMap
// - Set, WeakSet

// 값의 저장방식과 불변성 여부로 나누는 주요한 기준이 됨.
// 1. 복제의 방식
//   a. 기본형 : 값이 담긴 주소값을 바로 복제
//   b. 참조형 : 값이 담긴 주소값들로 이루어진 묶음을 가리키는 주소값을 복제

// 2. 불변성의 여부
//  a. 기본형 : 불변성을 띔 
// (= 불변하다.) => var a=6 ; a= 'abc'; 재할당이 가능한데 불변하다? 
// => 메모리 관점에서 봐야 불변한지 판단할 수 있음.

//  b. 참조형 : 불변성을 띄지 않음

// 메모리와 데이터에 관한 배경지식
// 1. 메모리, 데이터
//  a. 비트
    // i. 컴퓨터가 이해할 수 있는 가장 작은 단위.
    // ii. 0과 1을 가지고 있는 메모리를 구성하기 위한 작은 조각을 의미
    // iii. 이 작은 조각들이 모여 메모리가 만들어짐.
//  b. 바이트
    // i. 0과 1만 표현하는 비트를 모두 찾기는 부담.
    // ii. 1개 -> 2개 -> ... -> 8개(새로운 단위 : byte)

//  c. 메모리(memo + ry) : byte 단위로 작성
    //  i. 모든 데이터는 byte 단위의 식발자인 메모리 주소값을 통해서 서로 구분.
// 64비트(8바이트) 정수는 메모리에 어떻게 저장할 수 있을까요?
// => 64비트를 8개의 바이트로 분할하고, 각 바이트를 메모리에 저장.
// => 64비트 정수는 메모리에서 8개의 연속된 바이트에 저장.

//  d. java c와 다른 javascript으 ㅣㅔㅁ모리 관리 방식(feat. 정수형)
    // i. 8을 저장하는 방법.
        // 1. JS : let a = 8(byte)
        // 2. JAVA
            // a. byte a = 8(1byte)
            // b. short a = 8(2byte)
            // c. int a = 8(4byte)
            // d. long a = 8(16byte)
    // java 또는 c언어가 초기에 등장했을 때는 숫자 데이터 타입은 크기에 따라 다양하게 지정해줘야 할 만큼 개발자가
    // handling 할 요소가 많았지만, javascript는 메모리 이슈까지는 고민하지 않아도 되는 부분에서 상당히 편리함.

// 2. 식별자, 변수
    // a. var testValue (식별자) = 3 (변수)
    // b. 변수 = 데이터
    // c. 식별자 = 변수명

// 선언과 할당을 풀어쓴 방식
// var str;
// str = ' test! ';

// 선언과 할당을 붙여 쓴 방식 
// var str = ' test! ' ;